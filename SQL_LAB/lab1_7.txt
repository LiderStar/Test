FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY

#########Create Table##########
CREATE TABLE fine
(fine_id INT AUTO_INCREMENT,
name VARCHAR(30),
number_plate VARCHAR(6),
violation VARCHAR(50),
sum_fine FLOAT(8,2),
date_violation DATE,
date_payment DATE,
PRIMARY KEY (fine_id));

SELECT * FROM fine


################################
INSERT INTO fine 
(name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES
("Баранов П.Е.", "Р523ВТ", "Превышение скорости(от 40 до 60)", Null,"2020-02-14",Null),	 
("Абрамова К.А.", "О111АВ", "Проезд на запрещающий сигнал",Null,"2020-02-23",Null),	 
("Яковлев Г.Р.","Т330ТТ", "Проезд на запрещающий сигнал",Null,"2020-03-03",Null);
################################

UPDATE fine AS f, traffic_violation AS tv
SET f.sum_fine = tv.sum_fine
WHERE f.sum_fine iS NULL AND f.violation = tv.violation;

SELECT * FROM fine;

update fine as f 
set f.sum_fine = 
                (Select tv.sum_fine 
                 from traffic_violation as tv
                 where f.violation = tv.violation)
where f.sum_fine is null;

UPDATE fine AS f, traffic_violation AS tv
SET f.sum_fine = IF(f.sum_fine IS Null, tv.sum_fine, f.sum_fine)
WHERE tv.violation = f.violation;
SELECT * FROM fine;

#####################################
SELECT name, number_plate, violation FROM fine
GROUP BY name, number_plate, violation
HAVING count(number_plate)>1
ORDER BY name, number_plate, violation;

#####################################

UPDATE fine, (SELECT name, number_plate, violation FROM fine
GROUP BY name, number_plate, violation
HAVING count(number_plate)>1) query_in
SET sum_fine = sum_fine * 2
WHERE query_in.violation = fine.violation AND query_in.name = fine.name AND query_in.number_plate = fine.number_plate AND fine.date_payment IS NULL;

SELECT * FROM fine;


UPDATE fine t, fine f SET t.sum_fine  = 2. * t.sum_fine
WHERE f.name=t.name
   AND f.date_violation < t.date_violation
   AND t.violation = f.violation
   AND t.number_plate = f.number_plate
   AND t.date_payment IS Null;
#####################################
UPDATE fine AS f, payment AS pay
SET f.date_payment = pay.date_payment,
f.sum_fine = IF(DATEDIFF(pay.date_payment,pay.date_violation) <= 20, f.sum_fine / 2, f.sum_fine)
WHERE f.violation = pay.violation AND f.number_plate = pay.number_plate AND f.date_payment IS NULL;

SELECT * FROM fine
######################################

CREATE TABLE back_payment
SELECT name, number_plate, violation, sum_fine, date_violation
FROM fine
WHERE date_payment IS NULL;

SELECT * FROM back_payment;

#######################################
DELETE FROM fine WHERE date_violation < "2020-02-01";
#######################################
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author_id INT NOT NULL,
    genre_id INT,
    price DECIMAL(8,2),
    amount INT,
    FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id)  REFERENCES genre (genre_id) ON DELETE SET NULL
);
###########################################
SELECT title, name_genre, price
FROM genre INNER JOIN book
ON genre.genre_id = book.genre_id
WHERE amount > 8
ORDER BY price DESC;
###########################################
Генератор даты от 2020,01,01 365 дней
SELECT name_city, name_author, (DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND() * 365) DAY)) as Дата
FROM city, author

###########################################
SELECT name_genre, title, name_author
FROM
    author
    INNER JOIN  book ON author.author_id = book.author_id
    INNER JOIN genre ON genre.genre_id = book.genre_id
WHERE name_genre = "роман"
ORDER BY title;

###########################################
SELECT name_author, sum(amount) AS Количество
FROM author LEFT JOIN book
on author.author_id=book.author_id
GROUP BY name_author
HAVING Количество < 10 OR Количество IS NULL
ORDER BY Количество;

############################################

SELECT name_author
FROM author LEFT JOIN book
on author.author_id=book.author_id
GROUP BY name_author
HAVING count(DISTINCT(genre_id)) = 1;

###########################################
Вывел количество книг сгруппированное по жанрам :

Query result:
+----------+------------+
| genre_id | sum_amount |
+----------+------------+
| 1        | 31         |
| 2        | 31         |
| 3        | 7          |
+----------+------------+
Affected rows: 3
select genre_id, sum(amount) as sum_amount
        from book
        group by genre_id
        having sum_amount

Понял, что у нас несколько жанров имеют одинаковое количество книг, поэтому нужно оставить только те жанры, где кол-во книг будет максимальным. 

Изменяю немного код этот для вложенного запроса, чтобы выдало только максимально количество книг:

        select sum(amount) as sum_amount
        from book
        group by genre_id
        having sum_amount
        limit 1

Query result:
+------------+
| sum_amount |
+------------+
| 31         |
+------------+
Affected rows: 1
и пишу внешний запрос для выбора только номеров жанра(genre_id) фильтруя его по максимальному количеству(запросу сверху):

select genre_id
    from book
    group by genre_id
    having  sum(amount) = (
        select sum(amount) as sum_amount
        from book
        group by genre_id
        having sum_amount
        limit 1)

Query result:
+----------+
| genre_id |
+----------+
| 1        |
| 2        |
+----------+
На выходе получаю один столбец с номерами жанров. Самое сложное мы сделали, эти два запроса у нас будут внутренними для условия отбора. Осталось соединить все три таблицы и добавить эти запросы в условие where

SELECT title, name_author, name_genre, price, amount
FROM 
    author 
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON  book.genre_id = genre.genre_id
WHERE genre.genre_id in 
        (select genre_id
        from book
        group by genre_id
        having  sum(amount) = (
            select sum(amount) as sum_amount
            from book
            group by genre_id
            having sum_amount
            limit 1))
ORDER BY title

#################################################

#############################################

SELECT book.title AS Название, name_author AS Автор, book.amount + supply.amount AS Количество
FROM
    author
    INNER JOIN book USING (author_id)
    INNER JOIN supply ON book.title = supply.title
                         and author.name_author = supply.author
                         WHERE book.price = supply.price;

################################################

UPDATE book
     INNER JOIN author ON author.author_id = book.author_id
     INNER JOIN supply ON book.title = supply.title
                         and supply.author = author.name_author
SET book.amount = book.amount + supply.amount,
    supply.amount = 0,
    book.price = ((book.price* book.amount)+(supply.price * supply.amount)) / (book.amount + supply.amount)
WHERE book.price != supply.price;

SELECT * FROM book;

SELECT * FROM supply;

################################################
INSERT INTO author (author.name_author)
SELECT supply.author
FROM
    author
    RIGHT JOIN supply on author.name_author = supply.author
WHERE name_author IS Null;

SELECT * FROM author;
SELECT * FROM supply;

#################################################

INSERT INTO book (title, author_id, price, amount)
SELECT title, author_id, price, amount
FROM
    author
    INNER JOIN supply ON author.name_author = supply.author
WHERE amount <> 0;

SELECT * FROM book;

##################################################

UPDATE book
SET genre_id =
      (
       SELECT genre_id
       FROM genre
       WHERE name_genre = 'Поэзия'
      )
WHERE book_id = 10;
UPDATE book
SET genre_id =
      (
       SELECT genre_id
       FROM genre
       WHERE name_genre = 'Приключения'
      )
WHERE book_id = 11;

SELECT * FROM book;

####################################################

DELETE FROM author
INNER JOIN book ON author.author_id = book.author_id
WHERE book.author_id = (SELECT author_id FROM book GROUP BY author_id HAVING count(amount) < 20);

SELECT * FROM author;

SELECT * FROM book;

###################################################
DELETE FROM author
WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING sum(amount) < 20);

SELECT * FROM author;

SELECT * FROM book;

##################################################
DELETE FROM genre
WHERE genre_id IN (SELECT genre_id FROM book GROUP BY genre_id HAVING count(genre_id) < 4 );

SELECT * FROM genre;

SELECT * FROM book;
###################################################
DELETE FROM author
USING
    author
    INNER JOIN book ON author.author_id = book.author_id
    WHERE genre_id IN (SELECT genre_id FROM genre WHERE name_genre LIKE "Поэзия");

SELECT * FROM author;

SELECT * FROM book;
###################################################
SELECT buy.buy_id, title, price, buy_book.amount
FROM
    book
    INNER JOIN buy_book ON book.book_id = buy_book.book_id
    INNER JOIN buy ON buy_book.buy_id = buy.buy_id
    INNER JOIN client ON buy.client_id=client.client_id
WHERE name_client = 'Баранов Павел'
ORDER BY buy.buy_id, title;
#####################################################
SELECT name_author, title, count(buy_book.book_id) AS Количество
FROM
    book
    INNER JOIN author ON author.author_id = book.author_id
    LEFT OUTER JOIN buy_book ON buy_book.book_id = book.book_id
GROUP BY book.book_id
ORDER BY name_author,title
######################################################
SELECT name_city, COUNT(buy.client_id) AS Количество
FROM
city
    LEFT JOIN client USING(city_id)
    LEFT JOIN buy USING(client_id)
group by name_city
ORDER BY Количество DESC, name_city;
######################################################
SELECT buy_id, date_step_end
FROM
buy_step
INNER JOIN step USING(step_id)
WHERE step_id = 1 AND date_step_end IS NOT NULL;
######################################################
SELECT buy_id, name_client, SUM(buy_book.amount * book.price) AS Стоимость
FROM
client
INNER JOIN buy USING (client_id)
INNER JOIN buy_book USING (buy_id)
INNER JOIN book USING (book_id)
GROUP BY buy_id
######################################################
SELECT buy_id, name_step
FROM buy_step
INNER JOIN step USING (step_id)
WHERE date_step_beg AND date_step_end IS NULL
######################################################
SELECT buy_id,
IF (buy_step.step_id=3, DATEDIFF(date_step_end, date_step_beg), 0) AS Количество_дней,
IF (city.days_delivery < DATEDIFF(date_step_end, date_step_beg), DATEDIFF(date_step_end, date_step_beg)- city.days_delivery, 0) AS Опоздание
FROM
buy_step
INNER JOIN buy USING (buy_id)
INNER JOIN client USING (client_id)
INNER JOIN city USING (city_id)
WHERE buy_step.step_id=3 AND date_step_end IS NOT NULL
######################################################
SELECT DISTINCT name_client
FROM client
INNER JOIN buy USING (client_id)
INNER JOIN buy_book USING (buy_id)
INNER JOIN book USING (book_id)
INNER JOIN author USING (author_id)
WHERE author.name_author LIKE "Достоевский%"
ORDER BY name_client
######################################################
SELECT name_genre, SUM(buy_book.amount) AS Количество
FROM buy_book
INNER JOIN book USING (book_id)
INNER JOIN genre USING (genre_id)
GROUP BY name_genre
HAVING SUM(buy_book.amount)=
    (SELECT MAX(sum_amount)
            FROM
            (SELECT SUM(buy_book.amount) AS sum_amount
                FROM book
             INNER JOIN buy_book USING(book_id)
             GROUP BY genre_id) query_in)
######################################################
SELECT YEAR(date_payment) AS Год, MONTHNAME(date_payment) AS Месяц, SUM(amount*price) AS Сумма
FROM
    buy_archive
GROUP BY Год, Месяц
UNION ALL
SELECT YEAR(date_step_end) AS Год, MONTHNAME(date_step_end) AS Месяц, SUM(buy_book.amount*price) AS Сумма
FROM
    book
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id)
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)
WHERE  date_step_end IS NOT Null AND buy_step.step_id = 1
GROUP BY Год, Месяц
ORDER BY Месяц
######################################################
SELECT Inner_I.title, SUM(Inner_I.Количество) AS Количество, SUM(Inner_I.Сумма) AS Сумма
FROM
(SELECT book.title, SUM(buy_archive.amount) AS Количество, SUM(buy_archive.amount * buy_archive.price) AS Сумма
FROM
    buy_archive
    INNER JOIN book USING (book_id)
GROUP BY title
UNION ALL
SELECT book.title, SUM(buy_book.amount) AS Количество, SUM(buy_book.amount * book.price) AS Сумма
FROM
    book
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id)
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)
WHERE buy_step.step_id = 1 AND buy_step.date_step_end IS NOT NULL
GROUP BY title) AS Inner_I
GROUP BY Inner_I.title
ORDER BY Сумма DESC

######################################################
INSERT INTO client (name_client, city_id, email)
SELECT 'Попов Илья', city_id, 'popov@test'
FROM city
WHERE city_id = 1;

SELECT * FROM client
######################################################
######################################################
######################################################
######################################################